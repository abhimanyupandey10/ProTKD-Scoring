name: Build Windows App (ProTKD)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show runner info
        run: |
          Write-Host "Running on: $($env:RUNNER_OS)"
          python --version
          pip --version
        shell: pwsh

      - name: Setup Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip, setuptools, wheel
        run: python -m pip install --upgrade pip setuptools wheel
        shell: pwsh

      - name: Install build deps (pyinstaller) and app deps
        # installing pyinstaller first avoids some long resolution issues
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller==6.15.0 pyinstaller-hooks-contrib==2025.8
          if (Test-Path requirements.txt) {
            python -m pip install -r requirements.txt
          } else {
            Write-Host "requirements.txt not found â€” skipping pip install -r requirements.txt"
          }
        shell: pwsh

      - name: Clean previous builds (Windows)
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path *.spec) { Remove-Item -Force *.spec }
        shell: pwsh

      - name: Build EXE with PyInstaller (Windows)
        # Build: uses logo.ico if it exists; uses ; as add-data separator
        run: |
          $addData = '--add-data "templates;templates" --add-data "static;static"'
          $iconArg = ''
          if (Test-Path "logo.ico") { $iconArg = '--icon=logo.ico' }
          $cmd = "pyinstaller --onefile --noconsole --name ProTKD $iconArg $addData app.py"
          Write-Host "Running: $cmd"
          Invoke-Expression $cmd
        shell: pwsh
        env:
          PYTHONUNBUFFERED: '1'

      - name: List produced files
        run: Get-ChildItem -Recurse dist | Format-List
        shell: pwsh

      - name: Upload artifact (Windows EXE)
        uses: actions/upload-artifact@v4
        with:
          name: ProTKD-windows-${{ github.sha }}
          path: dist/*
