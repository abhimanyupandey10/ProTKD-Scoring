# .github/workflows/build.yml
name: Build Apps

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      # 1) Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # 2) Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      # 3) Cache pip
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4) Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller pyinstaller-hooks-contrib

      # 5) Clean previous builds (OS-specific)
      - name: Clean previous builds (Linux/macOS)
        if: runner.os != 'Windows'
        run: rm -rf build dist *.spec || true

      - name: Clean previous builds (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          if (Test-Path build) { Remove-Item -Recurse -Force build }
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          if (Test-Path *.spec) { Remove-Item -Force *.spec }

      # 6a) Build on Windows (use ';' separator for add-data)
      - name: Build with PyInstaller (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ICON_ARG = ""
          if (Test-Path "logo.ico") { $ICON_ARG = "--icon=logo.ico" }
          pyinstaller --onefile --noconsole `
            $ICON_ARG `
            --name ProTKD `
            --add-data "templates;templates" `
            --add-data "static;static" `
            app.py

      # 6b) Build on Linux
      - name: Build with PyInstaller (Linux)
        if: matrix.os == 'ubuntu-latest'
        shell: bash
        run: |
          ICON_ARG=""
          pyinstaller --onefile --noconsole \
            $ICON_ARG \
            --name ProTKD \
            --add-data "templates:templates" \
            --add-data "static:static" \
            app.py

      # 6c) Build on macOS
      - name: Build with PyInstaller (macOS)
        if: matrix.os == 'macos-latest'
        shell: bash
        run: |
          ICON_ARG=""
          if [ -f logo.icns ]; then ICON_ARG="--icon=logo.icns"; fi
          pyinstaller --onefile --noconsole \
            $ICON_ARG \
            --name ProTKD \
            --add-data "templates:templates" \
            --add-data "static:static" \
            app.py

      # 7) Show outputs
      - name: List build output
        run: ls -R dist

      # 8) Upload artifacts
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ProTKD-${{ matrix.os }}-${{ github.sha }}
          path: dist/*
          include-hidden-files: true
